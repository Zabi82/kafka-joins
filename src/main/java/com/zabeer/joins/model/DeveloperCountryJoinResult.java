/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.zabeer.joins.model;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class DeveloperCountryJoinResult extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -8670190783751493691L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"DeveloperCountryJoinResult\",\"namespace\":\"com.zabeer.joins.model\",\"fields\":[{\"name\":\"developerId\",\"type\":\"string\"},{\"name\":\"developerName\",\"type\":\"string\"},{\"name\":\"countryId\",\"type\":\"string\"},{\"name\":\"countryCode\",\"type\":\"string\"},{\"name\":\"countryName\",\"type\":\"string\"},{\"name\":\"skill\",\"type\":\"string\"},{\"name\":\"expLevel\",\"type\":\"string\"},{\"name\":\"relation\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<DeveloperCountryJoinResult> ENCODER =
      new BinaryMessageEncoder<DeveloperCountryJoinResult>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<DeveloperCountryJoinResult> DECODER =
      new BinaryMessageDecoder<DeveloperCountryJoinResult>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<DeveloperCountryJoinResult> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<DeveloperCountryJoinResult> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<DeveloperCountryJoinResult> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<DeveloperCountryJoinResult>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this DeveloperCountryJoinResult to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a DeveloperCountryJoinResult from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a DeveloperCountryJoinResult instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static DeveloperCountryJoinResult fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.CharSequence developerId;
   private java.lang.CharSequence developerName;
   private java.lang.CharSequence countryId;
   private java.lang.CharSequence countryCode;
   private java.lang.CharSequence countryName;
   private java.lang.CharSequence skill;
   private java.lang.CharSequence expLevel;
   private java.lang.CharSequence relation;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public DeveloperCountryJoinResult() {}

  /**
   * All-args constructor.
   * @param developerId The new value for developerId
   * @param developerName The new value for developerName
   * @param countryId The new value for countryId
   * @param countryCode The new value for countryCode
   * @param countryName The new value for countryName
   * @param skill The new value for skill
   * @param expLevel The new value for expLevel
   * @param relation The new value for relation
   */
  public DeveloperCountryJoinResult(java.lang.CharSequence developerId, java.lang.CharSequence developerName, java.lang.CharSequence countryId, java.lang.CharSequence countryCode, java.lang.CharSequence countryName, java.lang.CharSequence skill, java.lang.CharSequence expLevel, java.lang.CharSequence relation) {
    this.developerId = developerId;
    this.developerName = developerName;
    this.countryId = countryId;
    this.countryCode = countryCode;
    this.countryName = countryName;
    this.skill = skill;
    this.expLevel = expLevel;
    this.relation = relation;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return developerId;
    case 1: return developerName;
    case 2: return countryId;
    case 3: return countryCode;
    case 4: return countryName;
    case 5: return skill;
    case 6: return expLevel;
    case 7: return relation;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: developerId = (java.lang.CharSequence)value$; break;
    case 1: developerName = (java.lang.CharSequence)value$; break;
    case 2: countryId = (java.lang.CharSequence)value$; break;
    case 3: countryCode = (java.lang.CharSequence)value$; break;
    case 4: countryName = (java.lang.CharSequence)value$; break;
    case 5: skill = (java.lang.CharSequence)value$; break;
    case 6: expLevel = (java.lang.CharSequence)value$; break;
    case 7: relation = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'developerId' field.
   * @return The value of the 'developerId' field.
   */
  public java.lang.CharSequence getDeveloperId() {
    return developerId;
  }


  /**
   * Sets the value of the 'developerId' field.
   * @param value the value to set.
   */
  public void setDeveloperId(java.lang.CharSequence value) {
    this.developerId = value;
  }

  /**
   * Gets the value of the 'developerName' field.
   * @return The value of the 'developerName' field.
   */
  public java.lang.CharSequence getDeveloperName() {
    return developerName;
  }


  /**
   * Sets the value of the 'developerName' field.
   * @param value the value to set.
   */
  public void setDeveloperName(java.lang.CharSequence value) {
    this.developerName = value;
  }

  /**
   * Gets the value of the 'countryId' field.
   * @return The value of the 'countryId' field.
   */
  public java.lang.CharSequence getCountryId() {
    return countryId;
  }


  /**
   * Sets the value of the 'countryId' field.
   * @param value the value to set.
   */
  public void setCountryId(java.lang.CharSequence value) {
    this.countryId = value;
  }

  /**
   * Gets the value of the 'countryCode' field.
   * @return The value of the 'countryCode' field.
   */
  public java.lang.CharSequence getCountryCode() {
    return countryCode;
  }


  /**
   * Sets the value of the 'countryCode' field.
   * @param value the value to set.
   */
  public void setCountryCode(java.lang.CharSequence value) {
    this.countryCode = value;
  }

  /**
   * Gets the value of the 'countryName' field.
   * @return The value of the 'countryName' field.
   */
  public java.lang.CharSequence getCountryName() {
    return countryName;
  }


  /**
   * Sets the value of the 'countryName' field.
   * @param value the value to set.
   */
  public void setCountryName(java.lang.CharSequence value) {
    this.countryName = value;
  }

  /**
   * Gets the value of the 'skill' field.
   * @return The value of the 'skill' field.
   */
  public java.lang.CharSequence getSkill() {
    return skill;
  }


  /**
   * Sets the value of the 'skill' field.
   * @param value the value to set.
   */
  public void setSkill(java.lang.CharSequence value) {
    this.skill = value;
  }

  /**
   * Gets the value of the 'expLevel' field.
   * @return The value of the 'expLevel' field.
   */
  public java.lang.CharSequence getExpLevel() {
    return expLevel;
  }


  /**
   * Sets the value of the 'expLevel' field.
   * @param value the value to set.
   */
  public void setExpLevel(java.lang.CharSequence value) {
    this.expLevel = value;
  }

  /**
   * Gets the value of the 'relation' field.
   * @return The value of the 'relation' field.
   */
  public java.lang.CharSequence getRelation() {
    return relation;
  }


  /**
   * Sets the value of the 'relation' field.
   * @param value the value to set.
   */
  public void setRelation(java.lang.CharSequence value) {
    this.relation = value;
  }

  /**
   * Creates a new DeveloperCountryJoinResult RecordBuilder.
   * @return A new DeveloperCountryJoinResult RecordBuilder
   */
  public static com.zabeer.joins.model.DeveloperCountryJoinResult.Builder newBuilder() {
    return new com.zabeer.joins.model.DeveloperCountryJoinResult.Builder();
  }

  /**
   * Creates a new DeveloperCountryJoinResult RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new DeveloperCountryJoinResult RecordBuilder
   */
  public static com.zabeer.joins.model.DeveloperCountryJoinResult.Builder newBuilder(com.zabeer.joins.model.DeveloperCountryJoinResult.Builder other) {
    if (other == null) {
      return new com.zabeer.joins.model.DeveloperCountryJoinResult.Builder();
    } else {
      return new com.zabeer.joins.model.DeveloperCountryJoinResult.Builder(other);
    }
  }

  /**
   * Creates a new DeveloperCountryJoinResult RecordBuilder by copying an existing DeveloperCountryJoinResult instance.
   * @param other The existing instance to copy.
   * @return A new DeveloperCountryJoinResult RecordBuilder
   */
  public static com.zabeer.joins.model.DeveloperCountryJoinResult.Builder newBuilder(com.zabeer.joins.model.DeveloperCountryJoinResult other) {
    if (other == null) {
      return new com.zabeer.joins.model.DeveloperCountryJoinResult.Builder();
    } else {
      return new com.zabeer.joins.model.DeveloperCountryJoinResult.Builder(other);
    }
  }

  /**
   * RecordBuilder for DeveloperCountryJoinResult instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<DeveloperCountryJoinResult>
    implements org.apache.avro.data.RecordBuilder<DeveloperCountryJoinResult> {

    private java.lang.CharSequence developerId;
    private java.lang.CharSequence developerName;
    private java.lang.CharSequence countryId;
    private java.lang.CharSequence countryCode;
    private java.lang.CharSequence countryName;
    private java.lang.CharSequence skill;
    private java.lang.CharSequence expLevel;
    private java.lang.CharSequence relation;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.zabeer.joins.model.DeveloperCountryJoinResult.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.developerId)) {
        this.developerId = data().deepCopy(fields()[0].schema(), other.developerId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.developerName)) {
        this.developerName = data().deepCopy(fields()[1].schema(), other.developerName);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.countryId)) {
        this.countryId = data().deepCopy(fields()[2].schema(), other.countryId);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.countryCode)) {
        this.countryCode = data().deepCopy(fields()[3].schema(), other.countryCode);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.countryName)) {
        this.countryName = data().deepCopy(fields()[4].schema(), other.countryName);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.skill)) {
        this.skill = data().deepCopy(fields()[5].schema(), other.skill);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.expLevel)) {
        this.expLevel = data().deepCopy(fields()[6].schema(), other.expLevel);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.relation)) {
        this.relation = data().deepCopy(fields()[7].schema(), other.relation);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
    }

    /**
     * Creates a Builder by copying an existing DeveloperCountryJoinResult instance
     * @param other The existing instance to copy.
     */
    private Builder(com.zabeer.joins.model.DeveloperCountryJoinResult other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.developerId)) {
        this.developerId = data().deepCopy(fields()[0].schema(), other.developerId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.developerName)) {
        this.developerName = data().deepCopy(fields()[1].schema(), other.developerName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.countryId)) {
        this.countryId = data().deepCopy(fields()[2].schema(), other.countryId);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.countryCode)) {
        this.countryCode = data().deepCopy(fields()[3].schema(), other.countryCode);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.countryName)) {
        this.countryName = data().deepCopy(fields()[4].schema(), other.countryName);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.skill)) {
        this.skill = data().deepCopy(fields()[5].schema(), other.skill);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.expLevel)) {
        this.expLevel = data().deepCopy(fields()[6].schema(), other.expLevel);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.relation)) {
        this.relation = data().deepCopy(fields()[7].schema(), other.relation);
        fieldSetFlags()[7] = true;
      }
    }

    /**
      * Gets the value of the 'developerId' field.
      * @return The value.
      */
    public java.lang.CharSequence getDeveloperId() {
      return developerId;
    }


    /**
      * Sets the value of the 'developerId' field.
      * @param value The value of 'developerId'.
      * @return This builder.
      */
    public com.zabeer.joins.model.DeveloperCountryJoinResult.Builder setDeveloperId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.developerId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'developerId' field has been set.
      * @return True if the 'developerId' field has been set, false otherwise.
      */
    public boolean hasDeveloperId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'developerId' field.
      * @return This builder.
      */
    public com.zabeer.joins.model.DeveloperCountryJoinResult.Builder clearDeveloperId() {
      developerId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'developerName' field.
      * @return The value.
      */
    public java.lang.CharSequence getDeveloperName() {
      return developerName;
    }


    /**
      * Sets the value of the 'developerName' field.
      * @param value The value of 'developerName'.
      * @return This builder.
      */
    public com.zabeer.joins.model.DeveloperCountryJoinResult.Builder setDeveloperName(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.developerName = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'developerName' field has been set.
      * @return True if the 'developerName' field has been set, false otherwise.
      */
    public boolean hasDeveloperName() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'developerName' field.
      * @return This builder.
      */
    public com.zabeer.joins.model.DeveloperCountryJoinResult.Builder clearDeveloperName() {
      developerName = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'countryId' field.
      * @return The value.
      */
    public java.lang.CharSequence getCountryId() {
      return countryId;
    }


    /**
      * Sets the value of the 'countryId' field.
      * @param value The value of 'countryId'.
      * @return This builder.
      */
    public com.zabeer.joins.model.DeveloperCountryJoinResult.Builder setCountryId(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.countryId = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'countryId' field has been set.
      * @return True if the 'countryId' field has been set, false otherwise.
      */
    public boolean hasCountryId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'countryId' field.
      * @return This builder.
      */
    public com.zabeer.joins.model.DeveloperCountryJoinResult.Builder clearCountryId() {
      countryId = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'countryCode' field.
      * @return The value.
      */
    public java.lang.CharSequence getCountryCode() {
      return countryCode;
    }


    /**
      * Sets the value of the 'countryCode' field.
      * @param value The value of 'countryCode'.
      * @return This builder.
      */
    public com.zabeer.joins.model.DeveloperCountryJoinResult.Builder setCountryCode(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.countryCode = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'countryCode' field has been set.
      * @return True if the 'countryCode' field has been set, false otherwise.
      */
    public boolean hasCountryCode() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'countryCode' field.
      * @return This builder.
      */
    public com.zabeer.joins.model.DeveloperCountryJoinResult.Builder clearCountryCode() {
      countryCode = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'countryName' field.
      * @return The value.
      */
    public java.lang.CharSequence getCountryName() {
      return countryName;
    }


    /**
      * Sets the value of the 'countryName' field.
      * @param value The value of 'countryName'.
      * @return This builder.
      */
    public com.zabeer.joins.model.DeveloperCountryJoinResult.Builder setCountryName(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.countryName = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'countryName' field has been set.
      * @return True if the 'countryName' field has been set, false otherwise.
      */
    public boolean hasCountryName() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'countryName' field.
      * @return This builder.
      */
    public com.zabeer.joins.model.DeveloperCountryJoinResult.Builder clearCountryName() {
      countryName = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'skill' field.
      * @return The value.
      */
    public java.lang.CharSequence getSkill() {
      return skill;
    }


    /**
      * Sets the value of the 'skill' field.
      * @param value The value of 'skill'.
      * @return This builder.
      */
    public com.zabeer.joins.model.DeveloperCountryJoinResult.Builder setSkill(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.skill = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'skill' field has been set.
      * @return True if the 'skill' field has been set, false otherwise.
      */
    public boolean hasSkill() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'skill' field.
      * @return This builder.
      */
    public com.zabeer.joins.model.DeveloperCountryJoinResult.Builder clearSkill() {
      skill = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'expLevel' field.
      * @return The value.
      */
    public java.lang.CharSequence getExpLevel() {
      return expLevel;
    }


    /**
      * Sets the value of the 'expLevel' field.
      * @param value The value of 'expLevel'.
      * @return This builder.
      */
    public com.zabeer.joins.model.DeveloperCountryJoinResult.Builder setExpLevel(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.expLevel = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'expLevel' field has been set.
      * @return True if the 'expLevel' field has been set, false otherwise.
      */
    public boolean hasExpLevel() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'expLevel' field.
      * @return This builder.
      */
    public com.zabeer.joins.model.DeveloperCountryJoinResult.Builder clearExpLevel() {
      expLevel = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'relation' field.
      * @return The value.
      */
    public java.lang.CharSequence getRelation() {
      return relation;
    }


    /**
      * Sets the value of the 'relation' field.
      * @param value The value of 'relation'.
      * @return This builder.
      */
    public com.zabeer.joins.model.DeveloperCountryJoinResult.Builder setRelation(java.lang.CharSequence value) {
      validate(fields()[7], value);
      this.relation = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'relation' field has been set.
      * @return True if the 'relation' field has been set, false otherwise.
      */
    public boolean hasRelation() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'relation' field.
      * @return This builder.
      */
    public com.zabeer.joins.model.DeveloperCountryJoinResult.Builder clearRelation() {
      relation = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public DeveloperCountryJoinResult build() {
      try {
        DeveloperCountryJoinResult record = new DeveloperCountryJoinResult();
        record.developerId = fieldSetFlags()[0] ? this.developerId : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.developerName = fieldSetFlags()[1] ? this.developerName : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.countryId = fieldSetFlags()[2] ? this.countryId : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.countryCode = fieldSetFlags()[3] ? this.countryCode : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.countryName = fieldSetFlags()[4] ? this.countryName : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.skill = fieldSetFlags()[5] ? this.skill : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.expLevel = fieldSetFlags()[6] ? this.expLevel : (java.lang.CharSequence) defaultValue(fields()[6]);
        record.relation = fieldSetFlags()[7] ? this.relation : (java.lang.CharSequence) defaultValue(fields()[7]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<DeveloperCountryJoinResult>
    WRITER$ = (org.apache.avro.io.DatumWriter<DeveloperCountryJoinResult>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<DeveloperCountryJoinResult>
    READER$ = (org.apache.avro.io.DatumReader<DeveloperCountryJoinResult>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.developerId);

    out.writeString(this.developerName);

    out.writeString(this.countryId);

    out.writeString(this.countryCode);

    out.writeString(this.countryName);

    out.writeString(this.skill);

    out.writeString(this.expLevel);

    out.writeString(this.relation);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.developerId = in.readString(this.developerId instanceof Utf8 ? (Utf8)this.developerId : null);

      this.developerName = in.readString(this.developerName instanceof Utf8 ? (Utf8)this.developerName : null);

      this.countryId = in.readString(this.countryId instanceof Utf8 ? (Utf8)this.countryId : null);

      this.countryCode = in.readString(this.countryCode instanceof Utf8 ? (Utf8)this.countryCode : null);

      this.countryName = in.readString(this.countryName instanceof Utf8 ? (Utf8)this.countryName : null);

      this.skill = in.readString(this.skill instanceof Utf8 ? (Utf8)this.skill : null);

      this.expLevel = in.readString(this.expLevel instanceof Utf8 ? (Utf8)this.expLevel : null);

      this.relation = in.readString(this.relation instanceof Utf8 ? (Utf8)this.relation : null);

    } else {
      for (int i = 0; i < 8; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.developerId = in.readString(this.developerId instanceof Utf8 ? (Utf8)this.developerId : null);
          break;

        case 1:
          this.developerName = in.readString(this.developerName instanceof Utf8 ? (Utf8)this.developerName : null);
          break;

        case 2:
          this.countryId = in.readString(this.countryId instanceof Utf8 ? (Utf8)this.countryId : null);
          break;

        case 3:
          this.countryCode = in.readString(this.countryCode instanceof Utf8 ? (Utf8)this.countryCode : null);
          break;

        case 4:
          this.countryName = in.readString(this.countryName instanceof Utf8 ? (Utf8)this.countryName : null);
          break;

        case 5:
          this.skill = in.readString(this.skill instanceof Utf8 ? (Utf8)this.skill : null);
          break;

        case 6:
          this.expLevel = in.readString(this.expLevel instanceof Utf8 ? (Utf8)this.expLevel : null);
          break;

        case 7:
          this.relation = in.readString(this.relation instanceof Utf8 ? (Utf8)this.relation : null);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










